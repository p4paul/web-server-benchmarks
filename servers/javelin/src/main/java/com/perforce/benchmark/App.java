/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.perforce.benchmark;

import io.javalin.Javalin;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class App {

    private static ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();

    public static void main(String[] args) {
        Javalin app = Javalin.create().start(7000);

        app.get("/fib/:number", ctx -> {
            int number = Integer.parseInt(ctx.pathParam("number"));
            ctx.result("________Javelin: fib(" + number + ") = " + fib(number));
        });

        app.get("/file", ctx -> {
            String file = "../sample/commons-lang-2.6.jar";
            InputStream in = new FileInputStream(new File(file));
            ctx.result(in);
        });

        app.get("/future", ctx -> ctx.result(getFuture()));
    }

    private static CompletableFuture<InputStream> getFuture() {
        String file = "../sample/commons-lang-2.6.jar";
        CompletableFuture<InputStream> future = new CompletableFuture<>();
        // TODO wail until stream has finished (currently get a partial file)
        executorService.schedule(() -> future.complete(new FileInputStream(new File(file))), 0, TimeUnit.MILLISECONDS);
        return future;
    }

    public static int fib(int n) {
        if (n == 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        } else {
            return fib(n - 1) + fib(n - 2);
        }
    }
}
